#!/usr/bin/perl
#
# Author: Shahid Alam
# Dated: February 01, 2015
# E-mail: alam_shahid@yahoo.com
#
# AUC (area under the curve) algorithm from the following publication:
#
# Tom Fawcett (2006).  "An Introduction to ROC Analysis",  Pattern Recognition
# Letters, Volume 27, Issue 8, Pages 861-874.  Available from:
# http://dx.doi.org/10.1016/j.patrec.2005.10.010
# 
# 
# Builds ROC from the result files generated by run-cross-validation.pl
# First paramter:   The name (with full path) of the directory where the result files are stored.
# Second parameter: The number n in the n-fold cross validation.
# Third parameter:  The range of the runs, e.g, 1-100, 10-90, etc, with no spacing in between.
#
# e.g: build-ROC.pl c:\results 5 1-100
#
# It will atuomatically start procesing the following files
# c:\results\results_001_00.txt
# c:\results\results_001_01.txt
# c:\results\results_001_02.txt
# c:\results\results_001_03.txt
# c:\results\results_001_04.txt
# c:\results\results_002_00.txt
# c:\results\results_002_01.txt
# c:\results\results_002_02.txt
# c:\results\results_002_03.txt
# c:\results\results_002_04.txt
# -  -  -  -  -  -  -  -  -  -
# -  -  -  -  -  -  -  -  -  -
# -  -  -  -  -  -  -  -  -  -
# c:\results\results_100_00.txt
# c:\results\results_100_01.txt
# c:\results\results_100_02.txt
# c:\results\results_100_03.txt
# c:\results\results_100_04.txt
#
#
# It uses the first file to compute different parametrs, such as:
# The VWOD, HWOD, VSD, and number of malware samples and benign samples.
# and assumes that all other files will contain the same number of these samples.
# Then it will generate data for building the ROC graph as a gle file.
# If gle (Graphics Layout Engine) is installed it will also generate the graph plot as an image.
#
# The name of the output file contains n, VWOD, HWOD, VSD and range of HSD as follows:
# ROC-<n>-<VWOD>-<HWOD>-<VSD>-<[START_HSD-END_HSD]>.dot
# e.g, ROC-5-1-25-5-[1-100].dot
#
# TPR = TP / P;
# FPR = FP / N;
#
# where
# TP is the number of malware samples classified as malware,
# P is the total number of malware samples,
# FP is the number of benign samples that are classified as malware and
# N is the total number of benign samples
#
#
#
# Example result file:
#
# --- results_001_00.txt ---
# -  -  -  -  -  -  -  -  --  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
# -  -  -  -  -  -  -  -  --  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
# -  -  -  -  -  -  -  -  --  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -
#                                                                                                                                              Filename  Number Benign
#                                    c:/samples/malware/oat/GENOME/DroidKungFu4/data_DroidKungFu4@app@com.safett.butler-1@base.apk@classes.dex.dump.txt       0     0
#                                    c:/samples/malware/oat/GENOME/DroidKungFu2/data_DroidKungFu2@app@com.allen.txtjjsz-1@base.apk@classes.dex.dump.txt       1     0
#                                    c:/samples/malware/oat/GENOME/DroidKungFu3/data_DroidKungFu3@app@com.mogo.animalkeeper-1@base.apk@classes.dump.txt       2     0
#                                   c:/samples/malware/oat/GENOME/DroidKungFu4/data_DroidKungFu4@app@com.safesys.myvpn2-1@base.apk@classes.dex.dump.txt       3     0
#                                      c:/samples/malware/oat/GENOME/DroidKungFu2/data_DroidKungFu2@app@com.allen.txtdz-1@base.apk@classes.dex.dump.txt       4     0
#                                 c:/samples/malware/oat/GENOME/DroidKungFu2/data_DroidKungFu2@app@com.tutusw.onekeyvpn-1@base.apk@classes.dex.dump.txt       5     0
#                             c:/samples/malware/oat/GENOME/DroidKungFu2/data_DroidKungFu2@app@com.mediagroup.wcms.view-1@base.apk@classes.dex.dump.txt       6     0
#                                      c:/samples/malware/oat/GENOME/DroidKungFu3/data_DroidKungFu3@app@com.mogo.shuiguollk-1@base.apk@classes.dump.txt       7     0
#                                                      c:/samples/benign/oat/system@priv-app@SettingsProvider@SettingsProvider.apk@classes.dex.dump.txt       8     0
#                                                    c:/samples/benign/oat/system@priv-app@TelephonyProvider@TelephonyProvider.apk@classes.dex.dump.txt       9     0
#                                                                                                            c:/samples/benign/binary/libEnjemailuri.so      10     1
#                                                          c:/samples/benign/oat/system@priv-app@GoogleFeedback@GoogleFeedback.apk@classes.dex.dump.txt      11     0
#                                                                                                          c:/samples/benign/binary/libstagefrighthw.so      12     1
#                                                                                                                    c:/samples/benign/binary/screencap      13     1
#                                                                                                                     c:/samples/benign/binary/qseecomd      14     1
#                                                                                                            c:/samples/benign/binary/libeffectproxy.so      15     1
#
# Size of SWOD:
# VWOD = 1.00000
# HWOD = 25.00000
# VSD = 5.00000
# HSD = 34.00000
# Total Assigning Weights time:                                            34.55400 second(s)
# Total Training (building all signatures) time:                           30.84000 second(s)
# Total Testing (matching each signature with all signatures) time:        11.80900 second(s)
#
#
#
# Usage:
# build-ROC.pl <path to result files> <n> <range>
# Example:
# build-ROC.pl c:\results 5 1-100
#

use strict;
use warnings;

my $num_args = $#ARGV + 1;
if ($num_args != 3)
{
	die "Usage:\nbuild-ROC.pl <path to result files> <n> <range>\n\nExample:\nbuild-ROC.pl c:\\results 5 1-100\n";
}

my $PATH = $ARGV[0];
my $N = $ARGV[1];
my $RANGE = $ARGV[2];

#
# Parse the range to get the number of malware and benign samples
#
my @token = split('-', $RANGE);
my $token_size = $#token + 1;
if ($token_size != 2)
{
	die "Usage:\nbuild-ROC.pl <path to result files> <n> <range>\n\nExample:\nbuild-ROC.pl c:\\results 5 1-100\n";
}

my $VWOD = 0;
my $HWOD = 0;
my $VSD = 0;
my $START_HSD = $token[0] + 0;
my $END_HSD = $token[1] + 0;
my $NUMBER_MALWARE_SAMPLES = 0;
my $NUMBER_BENIGN_SAMPLES = 0;
my $end_char = substr($PATH, -1);
if ($end_char ne '/' && $end_char ne '\\')
{
	die "Usage:\nbuild-ROC.pl <path to result files> <n> <range>\n\nExample:\nbuild-ROC.pl c:\\results 5 1-100\nPlease provide full path to the result files . . .";
}
my $filename = $PATH . sprintf("results_%03d_%02d.txt", $START_HSD, "00");
open(my $FILE,"$filename") or die "ERROR - Cannot open $filename . . .";
my @lines = <$FILE>;
for (@lines)
{
	if ($_ =~ m/malware.*   [0,1]/)
	{
		$NUMBER_MALWARE_SAMPLES++;
	}
	elsif ($_ =~ m/benign.*   [0,1]/)
	{
		$NUMBER_BENIGN_SAMPLES++;
	}
	elsif ($_ =~ m/VWOD = /i)
	{
		@token = split("=", $_);
		$token_size = $#token + 1;
		if ($token_size != 2)
		{
			die "File missing VWOD value, quitting . . .\n";
		}
		$VWOD = $token[1] + 0;
	}
	elsif ($_ =~ m/HWOD = /i)
	{
		@token = split("=", $_);
		$token_size = $#token + 1;
		if ($token_size != 2)
		{
			die "File missing HWOD value, quitting . . .\n";
		}
		$HWOD = $token[1] + 0;
	}
	elsif ($_ =~ m/VSD = /i)
	{
		@token = split("=", $_);
		$token_size = $#token + 1;
		if ($token_size != 2)
		{
			die "File missing HWOD value, quitting . . .\n";
		}
		$VSD = $token[1] + 0;
	}
}
for (my $i = 1; $i < $N; $i++)
{
	$filename = $PATH . sprintf("results_%03d_%02d.txt", $START_HSD, $i);
	open(my $FILE,"$filename") or die "ERROR - Cannot open $filename . . .";
	my @lines = <$FILE>;
	my $lms = 0;
	my $lbs = 0;
	for (@lines)
	{
		if ($_ =~ m/malware.*   [0,1]/)
		{
			$lms++;
		}
		elsif ($_ =~ m/benign.*   [0,1]/)
		{
			$lbs++;
		}
	}
	my $fn = $i - 1;
	if ($NUMBER_MALWARE_SAMPLES < $lms)
	{
		$NUMBER_MALWARE_SAMPLES = $lms;
		print "--- WARNING ---\nThe number of malware samples used in one of the files ($fn) is not correct.\n";
		print "The ROC plot produced may be wrong . . .\nPlease rerun the test . . .\n\n";
	}
	if ($NUMBER_BENIGN_SAMPLES < $lbs)
	{
		$NUMBER_MALWARE_SAMPLES = $lbs;
		print "--- WARNING ---\nThe number of benign samples used in one of the files ($fn) is not correct.\n";
		print "The ROC plot produced may be wrong . . .\nPlease rerun the test . . .\n\n";
	}
}
close ($FILE);

my $OUTPUT_FILE_GLE = "ROC-$N-$VWOD-$HWOD-$VSD-[$START_HSD-$END_HSD].gle";
my $OUTPUT_FILE_DAT = "ROC-$N-$VWOD-$HWOD-$VSD-[$START_HSD-$END_HSD].dat";
my $OUTPUT_FILE_DAT_ORIGINAL = "ROC-$N-$VWOD-$HWOD-$VSD-[$START_HSD-$END_HSD].dat.original";
open(my $OUTPUT_GLE, ' > ', "$OUTPUT_FILE_GLE") or die "ERROR - Cannot open $OUTPUT_FILE_GLE . . .";
open(my $OUTPUT_DAT, ' > ', "$OUTPUT_FILE_DAT") or die "ERROR - Cannot open $OUTPUT_FILE_DAT . . .";
open(my $OUTPUT_DAT_ORIGINAL, ' > ', "$OUTPUT_FILE_DAT_ORIGINAL") or die "ERROR - Cannot open $OUTPUT_FILE_DAT_ORIGINAL . . .";
print "Path to result files = $PATH\nn-folds = $N\nmalware samples = $NUMBER_MALWARE_SAMPLES\nbenign samples = $NUMBER_BENIGN_SAMPLES\nGraph plot (gle) file = $OUTPUT_FILE_GLE\nGraph plot (dat) file = $OUTPUT_FILE_DAT\n";
print "VWOD = $VWOD HWOD = $HWOD\nVSD = $VSD START_HSD = $START_HSD END_HSD = $END_HSD\n";

#
# Generating TPR and FPR
#
my @TPR = 0;
my @FPR = 0;
my $string_to_print = sprintf ("Filename     FPR      TPR\n");
$filename = "";
for (my $hsd_count = $START_HSD; $hsd_count <= $END_HSD; $hsd_count++)
{
	my $total_tpr_local = 0;
	my $total_fpr_local = 0;
	for (my $n_fold_count = 0; $n_fold_count < $N; $n_fold_count++)
	{
		my $tp = 0;
		my $fp = 0;
		$filename = $PATH . sprintf("results_%03d_%02d.txt", $hsd_count, $n_fold_count);
		open($FILE,"$filename") or die "ERROR - Cannot open $filename . . .";
		my @lines = <$FILE>;
		for (@lines)
		{
			if ($_ =~ m/malware.*   0/)
			{
				$tp++;
			}
			elsif ($_ =~ m/benign.*   0/)
			{
				$fp++;
			}
		}
		my $tpr_local = $tp / $NUMBER_MALWARE_SAMPLES;
		my $fpr_local = $fp / $NUMBER_BENIGN_SAMPLES;
		$total_tpr_local += $tpr_local;
		$total_fpr_local += $fpr_local;
		close ($FILE);
	}
	$TPR[$hsd_count-$START_HSD] = $total_tpr_local / $N;
	$FPR[$hsd_count-$START_HSD] = $total_fpr_local / $N;
	$string_to_print = $string_to_print . sprintf ("%s   %03.03f    %03.03f\n", $filename, $FPR[$hsd_count-$START_HSD], $TPR[$hsd_count-$START_HSD]);
}
print $OUTPUT_DAT_ORIGINAL "$string_to_print\n";

#------------------------------------------------------
# Generating ROC points
#------------------------------------------------------

# 
# The first point
# 
my @ROC_points = [1.0, 1.0];
#
# Remove any repeating points (FPR, TPR)
# Check if the point is already added
# Only add the point if it's not already added
#
for my $i (0 .. $#TPR)
{
	my $ALREADY_ADDED = 0;
	my $n = 0;
	for my $pt (@ROC_points)
	{
		my $added_FPR = $ROC_points[$n][0];
		my $added_TPR = $ROC_points[$n][1];
		if ($added_FPR eq $FPR[$i] and $added_TPR eq $TPR[$i])
		{
			$ALREADY_ADDED = 1;
			last;
		}
		$n ++;
	}
	if ($ALREADY_ADDED == 0)
	{
		push(@ROC_points, [$FPR[$i], $TPR[$i]]);
	}
}
# 
# The last point
# 
push(@ROC_points, [0.0, 0.0]);
@ROC_points = sort { $a->[0] <=> $b->[0] || $a->[1] <=> $b->[1] } @ROC_points;
print "\n";
print_ROC();

#------------------------------------------------------
# Computing the AUC
#------------------------------------------------------

my $AUC = 0;
for my $i (1 .. $#ROC_points)
{
	my $last = $ROC_points[$i-1];
	my $this = $ROC_points[$i];
	my ($last_FPR, $last_TPR) = @$last;
	my ($this_FPR, $this_TPR) = @$this;

	# Trapezoid area
	my $area = trapezoid_area($last_FPR, $last_TPR, $this_FPR, $this_TPR);
	$AUC += $area;
}
print "AUC = $AUC\n\n";

#------------------------------------------------------
# Generating gle graph plot file
#------------------------------------------------------

$string_to_print = "";
my $n = 0;
for my $i (@ROC_points)
{
	$string_to_print = $string_to_print . sprintf ("%03.03f    %03.03f\n", $ROC_points[$n][0], $ROC_points[$n][1]);
	$n ++;
}
print $OUTPUT_DAT "$string_to_print\n";

$string_to_print = "size 20.0 20.0\n\n";

$string_to_print = $string_to_print . "set font texcmr hei 0.55 titlescale 1.85\n\n";

$string_to_print = $string_to_print . "begin graph\n";
$string_to_print = $string_to_print . "   scale auto\n";
$string_to_print = $string_to_print . "   title \"ROC Graph Plot\"\n";
$string_to_print = $string_to_print . "   ytitle \"True positive rate\"\n";
$string_to_print = $string_to_print . "   yaxis  grid nticks 10 min 0.0 max 1.0\n";
$string_to_print = $string_to_print . "   yticks color lightgray\n";
$string_to_print = $string_to_print . "   xtitle \"False positive rate\"\n";
$string_to_print = $string_to_print . "   xaxis  grid nticks 10 min 0.0 max 1.0\n";
$string_to_print = $string_to_print . "   xticks color lightgray\n";
$string_to_print = $string_to_print . "   x2axis off\n";
$string_to_print = $string_to_print . "   y2axis off\n";
$string_to_print = $string_to_print . sprintf ("   data %s d1\n", $OUTPUT_FILE_DAT);
$string_to_print = $string_to_print . "   key pos br nobox hei 0.45\n";
$string_to_print = $string_to_print . sprintf ("   d1 line color blue key \"Dataset using %d-fold cross validation, AUC = %.05f\"\n", $N, $AUC);
$string_to_print = $string_to_print . "end graph\n";

print "GLE file: $OUTPUT_FILE_GLE\n";
print $OUTPUT_GLE "$string_to_print\n";

my $cmd = sprintf ("gle %s", $OUTPUT_FILE_GLE);
print "Running $cmd\n";
system ($cmd);

close ($OUTPUT_GLE);
close ($OUTPUT_DAT);

print "\nExiting\n";
exit;

#------------------------------------------------------
# Helper functions
#------------------------------------------------------

#
# Base * 1/2 height.
#
sub trapezoid_area
{
    my($x1, $y1, $x2, $y2) = @_;
    ( $x2 - $x1 ) * ( $y1 + ($y2 - $y1)/2.0 )
}

sub print_ROC
{
	print "Printing ROC:\n";
	my $string_to_print = "";
	my $n = 0;
	for my $i (@ROC_points)
	{
		$string_to_print = $string_to_print . sprintf ("%3d:   %03.03f    %03.03f\n", $n, $ROC_points[$n][0], $ROC_points[$n][1]);
		$n ++;
	}
	print "$string_to_print\n";
}
